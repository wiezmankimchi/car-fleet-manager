datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
model User {
  id                     Int              @id @default(autoincrement())
  email                  String           @unique
  firstName              String?
  lastName               String?
  hashedPassword         String
  salt                   String
  resetToken             String?
  resetTokenExpiresAt    DateTime?
  webAuthnChallenge      String?          @unique
  credentials            UserCredential[]
  roles                  UserRole[]
  companyCreatedByUser   Company[]        @relation(name: "companyCreatedByUser")
  companyUpdatedByUser   Company[]        @relation(name: "companyUpdatedByUser")
  modelCreatedByuser     CarModel[]       @relation(name: "modelCreatedByUser")
  modelUpdatedByuser     CarModel[]       @relation(name: "modelUpdatedByUser")
  modelMakeCreatedByuser CarModelMake[]   @relation(name: "modelMakeCreatedByUser")
  modelMakeUpdatedByuser CarModelMake[]   @relation(name: "modelMakeUpdatedByUser")
  driverCreatedByuser    Driver[]         @relation(name: "driverCreatedByUser")
  driverUpdatedByuser    Driver[]         @relation(name: "driverUpdatedByUser")
  carCreatedByuser       Car[]            @relation(name: "carCreatedByUser")
  carUpdatedByuser       Car[]            @relation(name: "carUpdatedByUser")
  roleCreatedBy          Role[]           @relation(name: "roleCreatedByUser")
  roleUpdatedBy          Role[]           @relation(name: "roleUpdatedByUser")
  userRoleCreatedBy      UserRole[]       @relation(name: "userRoleCreatedByUser")
  userRoleUpdatedBy      UserRole[]       @relation(name: "userRoleUpdatedByUser")
  Company                Company[]
  CarModel               CarModel[]
  CarModelMake           CarModelMake[]
  Car                    Car[]
}

model UserCredential {
  id         String  @id
  userId     Int
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}

model Role {
  id            Int        @id @default(autoincrement())
  name          String
  createdAt     DateTime   @default(now())
  updateAt      DateTime?
  createdBy     Int?       @default(0)
  updatedBy     Int?
  createdByUser User?      @relation(fields: [createdBy], references: [id], name: "roleCreatedByUser")
  updatedByUser User?      @relation(fields: [updatedBy], references: [id], name: "roleUpdatedByUser")
  users         UserRole[]
}

model UserRole {
  id            Int       @id @default(autoincrement())
  userId        Int
  roleId        Int
  createdAt     DateTime  @default(now())
  updateAt      DateTime?
  createdBy     Int?      @default(0)
  updatedBy     Int?
  createdByUser User?     @relation(fields: [createdBy], references: [id], name: "userRoleCreatedByUser")
  updatedByUser User?     @relation(fields: [updatedBy], references: [id], name: "userRoleUpdatedByUser")
  user          User      @relation(fields: [userId], references: [id])
  role          Role      @relation(fields: [roleId], references: [id])
}

model Company {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  address1      String?
  address2      String?
  city          String
  zipcode       String
  country       String
  createdAt     DateTime      @default(now())
  updateAt      DateTime?
  createdBy     Int?          @default(0)
  updatedBy     Int?
  drivers       Driver[]
  cars          Car[]
  createdByUser User?         @relation(fields: [createdBy], references: [id], name: "companyCreatedByUser")
  updatedByUser User?         @relation(fields: [updatedBy], references: [id], name: "companyUpdatedByUser")
  User          User?         @relation(fields: [userId], references: [id])
  userId        Int?
}

model CarModel {
  id            Int            @id @default(autoincrement())
  name          String
  createdAt     DateTime       @default(now())
  updateAt      DateTime?
  createdBy     Int?           @default(0)
  updatedBy     Int?
  User          User?          @relation(fields: [userId], references: [id])
  createdByUser User?          @relation(fields: [createdBy], references: [id], name: "modelCreatedByUser")
  updatedByUser User?          @relation(fields: [updatedBy], references: [id], name: "modelUpdatedByUser")
  models        CarModelMake[]
  userId        Int?
}

model CarModelMake {
  id            Int       @id @default(autoincrement())
  name          String
  createdAt     DateTime  @default(now())
  updateAt      DateTime?
  createdBy     Int?      @default(0)
  updatedBy     Int?
  carMakeId     Int
  createdByUser User?     @relation(fields: [createdBy], references: [id], name: "modelMakeCreatedByUser")
  updatedByUser User?     @relation(fields: [updatedBy], references: [id], name: "modelMakeUpdatedByUser")
  make          CarModel  @relation(fields: [carMakeId], references: [id])
  cars          Car[]
  User          User?     @relation(fields: [userId], references: [id])
  userId        Int?
}

model Driver {
  id            Int       @id @default(autoincrement())
  name          String
  email         String
  phone         String
  dob           DateTime
  companyId     Int
  createdAt     DateTime  @default(now())
  updateAt      DateTime?
  createdBy     Int?      @default(0)
  updatedBy     Int?
  createdByUser User?     @relation(fields: [createdBy], references: [id], name: "driverCreatedByUser")
  updatedByUser User?     @relation(fields: [updatedBy], references: [id], name: "driverUpdatedByUser")
  company       Company?  @relation(fields: [companyId], references: [id])
  cars          Car[]
}

model Car {
  id            Int          @id @default(autoincrement())
  registrtion   String
  regDate       DateTime
  makeId        Int
  driverId      Int
  companyId     Int
  createdAt     DateTime     @default(now())
  updateAt      DateTime?
  createdBy     Int?         @default(0)
  updatedBy     Int?
  createdByUser User?        @relation(fields: [createdBy], references: [id], name: "carCreatedByUser")
  updatedByUser User?        @relation(fields: [updatedBy], references: [id], name: "carUpdatedByUser")
  carmake       CarModelMake @relation(fields: [makeId], references: [id])
  driver        Driver       @relation(fields: [driverId], references: [id])
  company       Company?     @relation(fields: [companyId], references: [id])
  User          User?        @relation(fields: [userId], references: [id])
  userId        Int?
}


